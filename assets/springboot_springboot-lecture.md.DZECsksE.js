import{_ as a,c as i,o as n,a4 as p}from"./chunks/framework.BaYfB92R.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"springboot/springboot-lecture.md","filePath":"springboot/springboot-lecture.md","lastUpdated":1746595356000}'),l={name:"springboot/springboot-lecture.md"};function e(h,s,t,k,r,d){return n(),i("div",null,s[0]||(s[0]=[p(`<h2 id="강좌-소개" tabindex="-1">강좌 소개 <a class="header-anchor" href="#강좌-소개" aria-label="Permalink to &quot;강좌 소개&quot;">​</a></h2><h3 id="강좌-소개-1" tabindex="-1">강좌 소개 <a class="header-anchor" href="#강좌-소개-1" aria-label="Permalink to &quot;강좌 소개&quot;">​</a></h3><h3 id="수업-자료" tabindex="-1">수업 자료 <a class="header-anchor" href="#수업-자료" aria-label="Permalink to &quot;수업 자료&quot;">​</a></h3><h3 id="강의-소스-코드" tabindex="-1">강의 소스 코드 <a class="header-anchor" href="#강의-소스-코드" aria-label="Permalink to &quot;강의 소스 코드&quot;">​</a></h3><h3 id="_2편-추가-자료" tabindex="-1">2편 추가 자료 <a class="header-anchor" href="#_2편-추가-자료" aria-label="Permalink to &quot;2편 추가 자료&quot;">​</a></h3><h2 id="api-개발-기본" tabindex="-1">API 개발 기본 <a class="header-anchor" href="#api-개발-기본" aria-label="Permalink to &quot;API 개발 기본&quot;">​</a></h2><h3 id="회원-등록-api" tabindex="-1">회원 등록 API <a class="header-anchor" href="#회원-등록-api" aria-label="Permalink to &quot;회원 등록 API&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 개발 시 Request, Response에 해당하는 class는 따로 생성</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PostMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/v1/members&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CreateMemberResponse </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">saveMemberV1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Valid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Member member) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Long id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memberService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(member);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CreateMemberResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PostMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/v2/members&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CreateMemberResponse </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">saveMemberV2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Valid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CreateMemberRequest request) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Member member </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Member</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    member.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Long id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memberService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(member);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CreateMemberResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="회원-수정-api" tabindex="-1">회원 수정 API <a class="header-anchor" href="#회원-수정-api" aria-label="Permalink to &quot;회원 수정 API&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ENtity수정은 변경감지를 활용</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Update는 반환값이 없는게 좋음(커맨드와 쿼리를 분리)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PutMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/v2/members/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UpdateMemberResponse </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateMemberV2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PathVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) Long id, @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RequestBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Valid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UpdateMemberRequest request) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    memberService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id, request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Member findMember </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memberService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UpdateMemberResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(findMember.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), findMember.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="회원-조회-api" tabindex="-1">회원 조회 API <a class="header-anchor" href="#회원-조회-api" aria-label="Permalink to &quot;회원 조회 API&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Entity를 @JSonIgnore를 하는 형태로도 가능하지만 절대하지 않기</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Entity의 값을 변경시 api의 Spec이 변경되면 안됨</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Spec 확장을 고려해서 data에 Array를 넣는 형태로 진행</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/v2/members&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Result </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">membersV2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Member</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; findMembers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memberService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findMembers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //엔티티 -&gt; DTO 변환</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MemberDto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; collect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> findMembers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MemberDto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(collect);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="api-개발-고급-준비" tabindex="-1">API 개발 고급 - 준비 <a class="header-anchor" href="#api-개발-고급-준비" aria-label="Permalink to &quot;API 개발 고급 - 준비&quot;">​</a></h2><h3 id="api-개발-고급-소개" tabindex="-1">API 개발 고급 소개 <a class="header-anchor" href="#api-개발-고급-소개" aria-label="Permalink to &quot;API 개발 고급 소개&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>조회용 샘플 데이터 입력</span></span>
<span class="line"><span>지연 로딩과 조회 성능 최적화</span></span>
<span class="line"><span>컬렉션 조회 최적화</span></span>
<span class="line"><span>페이징과 한계 돌파</span></span>
<span class="line"><span>OSIV와 성능 최적화</span></span></code></pre></div><h3 id="조회용-샘플-데이터-입력" tabindex="-1">조회용 샘플 데이터 입력 <a class="header-anchor" href="#조회용-샘플-데이터-입력" aria-label="Permalink to &quot;조회용 샘플 데이터 입력&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>userA</span></span>
<span class="line"><span>-JPA1 BOOK</span></span>
<span class="line"><span>-JPA2 BOOK</span></span>
<span class="line"><span></span></span>
<span class="line"><span>userB</span></span>
<span class="line"><span>-SPRING1 BOOK</span></span>
<span class="line"><span>-SPRING2 BOOK</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>initService.dbInit1();</span></span>
<span class="line"><span>initService.dbInit2();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  jpa:</span></span>
<span class="line"><span>    hibernate:</span></span>
<span class="line"><span>      ddl-auto: create</span></span></code></pre></div><h2 id="api-개발-고급-지연-로딩과-조회-성능-최적화" tabindex="-1">API 개발 고급 - 지연 로딩과 조회 성능 최적화 <a class="header-anchor" href="#api-개발-고급-지연-로딩과-조회-성능-최적화" aria-label="Permalink to &quot;API 개발 고급 - 지연 로딩과 조회 성능 최적화&quot;">​</a></h2><h3 id="간단한-주문-조회-v1-엔티티를-직접-노출" tabindex="-1">간단한 주문 조회 V1: 엔티티를 직접 노출 <a class="header-anchor" href="#간단한-주문-조회-v1-엔티티를-직접-노출" aria-label="Permalink to &quot;간단한 주문 조회 V1: 엔티티를 직접 노출&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>주문 + 배송정보 + 회원을 조회하는 API를 만들자</span></span>
<span class="line"><span>지연 로딩 때문에 발생하는 성능 문제를 단계적으로 해결해보자.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>참고: 지금부터 설명하는 내용은 정말 중요합니다. 실무에서 JPA를 사용하려면 100% 이해해야 합니다.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ManyToOne, OneToOne 성능최적화</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>localhost:8080/api/v1/simple-orders</span></span>
<span class="line"><span></span></span>
<span class="line"><span>양방향 연관관계가 있을 경우 @JsonIgnore</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fetch =LAZY 지연로딩 시.. 에러가 발생해서 Hibernate5Module</span></span>
<span class="line"><span>Configure를 수정해서 강제 Lazy로딩을 하게할 수도 있지만 하면안됨..</span></span>
<span class="line"><span>hibernate5Module.configure(Hibernate5Module.Feature.FORCE_LAZY_LOADING, true);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>아래와 같이 강제 초기화할 수 있음</span></span>
<span class="line"><span>for (Order order : all) {</span></span>
<span class="line"><span>    order.getMember().getName(); //Lazy 강제 초기화</span></span>
<span class="line"><span>    order.getDelivery().getAddress(); //Lazy 강제 초기화</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>지연 로딩(LAZY)를 피하기 위해 즉시 로딩(EARER)으로 설정하면 안됨. 즉시로딩은 연관관계가 필요없을때도 데이터를 항상조회해서 성능문제를 발생할 수 있음</span></span>
<span class="line"><span>즉시 로딩으로 설정 시 성능 튜닝이 어려워짐</span></span>
<span class="line"><span>항상 지연로딩을 기본으로하고, 성능 최적화가 필요한 경우 페치조인(fetch join)을 사용</span></span></code></pre></div><h3 id="간단한-주문-조회-v2-엔티티를-dto로-변환" tabindex="-1">간단한 주문 조회 V2: 엔티티를 DTO로 변환 <a class="header-anchor" href="#간단한-주문-조회-v2-엔티티를-dto로-변환" aria-label="Permalink to &quot;간단한 주문 조회 V2: 엔티티를 DTO로 변환&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#  org.hibernate.type: trace</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@ManyToOne(fetch = EAGER) 하면 안되는 이유 </span></span>
<span class="line"><span>@ManyToOne(fetch = LAZY)를 사용</span></span>
<span class="line"><span></span></span>
<span class="line"><span>엔티티를 DTO로 변환하는 일반적인 방법</span></span>
<span class="line"><span>쿼리가 총 1 + N + N번 실행된다. (v1과 쿼리수 결과는 같다.)</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/v2/simple-orders&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SimpleOrderDto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ordersV2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ORDER 2개</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // N + 1 -&gt; 1 + 회원 N + 배송 N</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; orders </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> orderRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SimpleOrderDto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> orders.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SimpleOrderDto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="간단한-주문-조회-v3-엔티티를-dto로-변환-페치-조인-최적화" tabindex="-1">간단한 주문 조회 V3: 엔티티를 DTO로 변환 - 페치 조인 최적화 <a class="header-anchor" href="#간단한-주문-조회-v3-엔티티를-dto로-변환-페치-조인-최적화" aria-label="Permalink to &quot;간단한 주문 조회 V3: 엔티티를 DTO로 변환 - 페치 조인 최적화&quot;">​</a></h3><h3 id="간단한-주문-조회-v4-jpa에서-dto로-바로-조회" tabindex="-1">간단한 주문 조회 V4: JPA에서 DTO로 바로 조회 <a class="header-anchor" href="#간단한-주문-조회-v4-jpa에서-dto로-바로-조회" aria-label="Permalink to &quot;간단한 주문 조회 V4: JPA에서 DTO로 바로 조회&quot;">​</a></h3><h2 id="api-개발-고급-컬렉션-조회-최적화" tabindex="-1">API 개발 고급 - 컬렉션 조회 최적화 <a class="header-anchor" href="#api-개발-고급-컬렉션-조회-최적화" aria-label="Permalink to &quot;API 개발 고급 - 컬렉션 조회 최적화&quot;">​</a></h2><h3 id="주문-조회-v1-엔티티-직접-노출" tabindex="-1">주문 조회 V1: 엔티티 직접 노출 <a class="header-anchor" href="#주문-조회-v1-엔티티-직접-노출" aria-label="Permalink to &quot;주문 조회 V1: 엔티티 직접 노출&quot;">​</a></h3><h3 id="주문-조회-v2-엔티티를-dto로-변환" tabindex="-1">주문 조회 V2: 엔티티를 DTO로 변환 <a class="header-anchor" href="#주문-조회-v2-엔티티를-dto로-변환" aria-label="Permalink to &quot;주문 조회 V2: 엔티티를 DTO로 변환&quot;">​</a></h3><h3 id="주문-조회-v3-엔티티를-dto로-변환-페치-조인-최적화" tabindex="-1">주문 조회 V3: 엔티티를 DTO로 변환 - 페치 조인 최적화 <a class="header-anchor" href="#주문-조회-v3-엔티티를-dto로-변환-페치-조인-최적화" aria-label="Permalink to &quot;주문 조회 V3: 엔티티를 DTO로 변환 - 페치 조인 최적화&quot;">​</a></h3><h3 id="주문-조회-v3-1-엔티티를-dto로-변환-페이징과-한계-돌파" tabindex="-1">주문 조회 V3.1: 엔티티를 DTO로 변환 - 페이징과 한계 돌파 <a class="header-anchor" href="#주문-조회-v3-1-엔티티를-dto로-변환-페이징과-한계-돌파" aria-label="Permalink to &quot;주문 조회 V3.1: 엔티티를 DTO로 변환 - 페이징과 한계 돌파&quot;">​</a></h3><h3 id="주문-조회-v4-jpa에서-dto-직접-조회" tabindex="-1">주문 조회 V4: JPA에서 DTO 직접 조회 <a class="header-anchor" href="#주문-조회-v4-jpa에서-dto-직접-조회" aria-label="Permalink to &quot;주문 조회 V4: JPA에서 DTO 직접 조회&quot;">​</a></h3><h3 id="주문-조회-v5-jpa에서-dto-직접-조회-컬렉션-조회-최적화" tabindex="-1">주문 조회 V5: JPA에서 DTO 직접 조회 - 컬렉션 조회 최적화 <a class="header-anchor" href="#주문-조회-v5-jpa에서-dto-직접-조회-컬렉션-조회-최적화" aria-label="Permalink to &quot;주문 조회 V5: JPA에서 DTO 직접 조회 - 컬렉션 조회 최적화&quot;">​</a></h3><h3 id="주문-조회-v6-jpa에서-dto로-직접-조회-플랫-데이터-최적화" tabindex="-1">주문 조회 V6: JPA에서 DTO로 직접 조회, 플랫 데이터 최적화 <a class="header-anchor" href="#주문-조회-v6-jpa에서-dto로-직접-조회-플랫-데이터-최적화" aria-label="Permalink to &quot;주문 조회 V6: JPA에서 DTO로 직접 조회, 플랫 데이터 최적화&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>한번의 쿼리로 실행이 가능</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OrderQueryRepository</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OrderFlatDto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findAllByDto_flat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> em.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;select new jpabook.jpashop.repository.order.query.OrderFlatDto(o.id, m.name, o.orderDate, o.status, d.address, i.name, oi.orderPrice, oi.count)&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    &quot; from Order o&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    &quot; join o.member m&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    &quot; join o.delivery d&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    &quot; join o.orderItems oi&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    &quot; join oi.item i&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, OrderFlatDto.class)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getResultList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OrderApiController</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/v6/orders&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OrderQueryDto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ordersV6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OrderFlatDto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; flats </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> orderQueryRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findAllByDto_flat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flats.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">groupingBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrderQueryDto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrderId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), o.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), o.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrderDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), o.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrderStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), o.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    mapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrderItemQueryDto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrderId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), o.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getItemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), o.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrderPrice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), o.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entrySet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrderQueryDto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrderId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrderDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrderStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OrderQueryDto</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EqualsAndHashCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">of</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;orderId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="api-개발-고급-정리" tabindex="-1">API 개발 고급 정리 <a class="header-anchor" href="#api-개발-고급-정리" aria-label="Permalink to &quot;API 개발 고급 정리&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>*엔티티 조회</span></span>
<span class="line"><span>- 엔티티를 조회해서 그대로 반환: V1</span></span>
<span class="line"><span>- 엔티티 조회 후 DTO로 변환: V2</span></span>
<span class="line"><span>- 페치 조인으로 쿼리 수 최적화: V3</span></span>
<span class="line"><span>- 컬렉션 페이징과 한계 돌파: V3.1</span></span>
<span class="line"><span>    - 컬렉션은 페치 조인시 페이징이 불가능</span></span>
<span class="line"><span>    - ToOne 관계는 페치 조인으로 쿼리 수 최적화</span></span>
<span class="line"><span>    - 컬렉션은 페치 조인 대신에 지연 로딩을 유지하고, hibernate.default_batch_fetch_size,</span></span>
<span class="line"><span>      @BatchSize로 최적화</span></span>
<span class="line"><span></span></span>
<span class="line"><span>*DTO 직접조회</span></span>
<span class="line"><span>- JPA에서 DTO를 직접 조회: V4</span></span>
<span class="line"><span>- 컬렉션 조회 최적화- 일대다 관계인 컬렉션은 IN 절을 활용해서 메모리에 미리 조회해서 최적화: V5</span></span>
<span class="line"><span>- 플랫 데이터 최적화 - JOIN 결과를 그대로 조회 후 애플리케이션에서 원하는 모양으로 직접 변환: V6</span></span>
<span class="line"><span></span></span>
<span class="line"><span>*권장순서</span></span>
<span class="line"><span>1. 엔티티 조회방식으로 우선 접근</span></span>
<span class="line"><span>    1.페치조인으로 쿼리 수를 최적화</span></span>
<span class="line"><span>    2.컬렉션 최적화</span></span>
<span class="line"><span>        1.페이징 필요 -&gt; hibernate.default_batch_fetch_size, @BatchSize로 최적화</span></span>
<span class="line"><span>        2. 페이징 필요x -&gt; 페치 조인 사용</span></span>
<span class="line"><span>2. 엔티티 조회 방식으로 해결이 안되면 DTO 조회 방식 사용</span></span>
<span class="line"><span>3. DTO 조회 방식으로 해결이 안되면 NativeSQL or Spring JdbcTemplate</span></span>
<span class="line"><span></span></span>
<span class="line"><span>참고: 엔티티 조회 방식은 페치 조인이나, hibernate.default_batch_fetch_size, @BatchSize 같이 코드를 거의 수정하지 않고, 옵션만 약간 변경해서, 다양한 성능 최적화를 시도할 수 있다. 반면에 DTO를 직접 조회하는 방식은 성능을 최적화 하거나 성능 최적화 방식을 변경할 때 많은 코드를 변경해야 한다.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>참고: 개발자는 성능 최적화와 코드 복잡도 사이에서 줄타기를 해야한다. 항상 그런 것은 아니지만, 보통 성능 최적화는 단순한 코드를 복잡한 코드로 몰고간다.</span></span>
<span class="line"><span>엔티티 조회방식은 JPA가 많은 부분을 최적화 해주기 때문에, 단순한 코드를 유지하면서, 성능을 최적화 할 수 있다.</span></span>
<span class="line"><span>반면에 DTO 조회 방식은 SQL을 직접 다루는 것과 유사하기 때문에, 둘 사이에 줄타기를 해야 한다.</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>DTO 조회 방식의 선택지</span></span>
<span class="line"><span>- DTO로 조회하는 방법도 각각 장단이 있다. V4, V5, V6에서 단순하게 쿼리가 1번 실행된다고 V6이 항상 좋은 방법인 것은 아니다.</span></span>
<span class="line"><span>-V4는 코드가 단순하가. 특정 주문 한건만 조회하면 이 방식을 사용해도 성능이 잘 나온다. 예를 들어서 조회한 Order데이터가 1건이면 OrderItem을 찾기 위한 쿼리도 1번만 실행하면 된다.</span></span>
<span class="line"><span>-V5는 코드가 복잡하다. 여러 주문을 한꺼번에 조회하는 경우에는 V4 대신에 이것을 최적화한 V5 방식을 사용해야 한다. 예를 들어서 조회한 Order데이터가 1000건인데, V4 방식을 그대로 사용하면, 쿼리가 총 1 + 1000번 실행된다. 여기서 1은 Order를 조회한 쿼리고, 1000은 조회된 Order의 row 수다. V5 방식으로 최적화 하면 쿼리가 총 1 + 1번만 실행된다. 상황에 따라 다르겠지만 운영 환경에서 100배 이상의 성능 차이가 날 수 있다.</span></span>
<span class="line"><span>-V6는 완전히 다른 접근방식이다. 쿼리 한번으로 최적화 되어서 상당히 좋아보이지만, Order를 기준으로 페이징이 불가능하다. 실무에서는 이정도 데이터면 수백이나, 수천건 단위로 페이징 처리가 꼭 필요하므로, 이 경우 선택하기 어려운 방법이다. 그리고 데이터가 많으면 중복 전송이 증가해서 V5와 비교해서 성능 차이도 미비하다.</span></span></code></pre></div><h2 id="api-개발-고급-실무-필수-최적화" tabindex="-1">API 개발 고급 - 실무 필수 최적화 <a class="header-anchor" href="#api-개발-고급-실무-필수-최적화" aria-label="Permalink to &quot;API 개발 고급 - 실무 필수 최적화&quot;">​</a></h2><h3 id="osiv와-성능-최적화" tabindex="-1">OSIV와 성능 최적화 <a class="header-anchor" href="#osiv와-성능-최적화" aria-label="Permalink to &quot;OSIV와 성능 최적화&quot;">​</a></h3><h2 id="다음으로" tabindex="-1">다음으로 <a class="header-anchor" href="#다음으로" aria-label="Permalink to &quot;다음으로&quot;">​</a></h2><h3 id="스프링-데이터-jpa-소개" tabindex="-1">스프링 데이터 JPA 소개 <a class="header-anchor" href="#스프링-데이터-jpa-소개" aria-label="Permalink to &quot;스프링 데이터 JPA 소개&quot;">​</a></h3><h3 id="querydsl-소개" tabindex="-1">QueryDSL 소개 <a class="header-anchor" href="#querydsl-소개" aria-label="Permalink to &quot;QueryDSL 소개&quot;">​</a></h3>`,42)]))}const o=a(l,[["render",e]]);export{g as __pageData,o as default};
