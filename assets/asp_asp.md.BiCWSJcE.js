import{_ as n,c as a,o as p,a4 as l}from"./chunks/framework.C2Gk6cJW.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"asp/asp.md","filePath":"asp/asp.md","lastUpdated":1755149806000}'),e={name:"asp/asp.md"};function i(c,s,t,o,r,w){return p(),a("div",null,s[0]||(s[0]=[l(`<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[ASP.NET MVC] 1. ASP.NET 소개 - .net Framework, .net Core</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=Y_X4A0P06Os</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 2. ASP.NET MVC Core 프로젝트 만들기</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=mMIkH6T3euA</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 3. _Layout</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=86ehigeqri8</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 4. Razor Syntax</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=GRHy0FgrJrw</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 5. Controller에서 View로 데이터 전달하기</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=TTQW2ou3w7c</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 6. EntityFramework Core 소개 및 MS SQL Server</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=7PTFfqov1wY</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 7. EntityFramework Core로 데이터베이스 생성하기</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=MNmcTeEv07A</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 8. 회원가입 기능 만들기</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=negMazMl7WQ</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 9. Visual Studio 2017 설치 및 2015 프로젝트 업그레이드</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=tyx4Vyj5a_U</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 10. 로그인 입력 Form 만들기</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=492E2t0gxEg</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 11. 로그인, 로그오프 기능 만들기</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=G5AxF9pt4Pw</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 12. 게시판 리스트 출력하기</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=ryf9ikInHsQ</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 13. 게시물 추가하기</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=6wA9Ilhj6sA</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 14. 게시물 상세보기 페이지 만들기</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=CbnoRYXgw0c</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 15. 자바스크립트 텍스트 에디터 적용하기 (feat. Trumbowyg)</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=oOFNh0KM7kU</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 16. 자바스크립트 텍스트 에디터 이미지 업로드</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=7cKA-lEqDjM</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 17. Enterprise Architecture 프로젝트 구성하기</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=dKvCZUec100</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 18. Dependency Injection, IoC Container 사용하기</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=GWgXbQEOi9Y</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 19. MVC5에서 Unity Container를 이용한 Dependency Injection</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=ac-IQsmaY3M</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 20. appsettings.json를 통한 ConnectionString 처리하기</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=UACohTbIfpM</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 21. async, await 비동기 처리 프로그래밍 구현하기</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=T-XskK2kBmg</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 22. ASP.NET Core Identity 소개</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=t9ApesVOalw</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 23. Identity 생성 테이블 PK 타입 변경하기</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=JnA29XdZnxg</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 24. ASP.NET Core Identity 모델 클래스 설명</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=DW7Sl9Q6HBA</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[ASP.NET MVC] 25. AccountController 소스코드 분석하기</span></span>
<span class="line"><span>https://www.youtube.com/watch?v=_GZHPPdM3OQ</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Chapter 6</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ASP.NET MVC</span></span>
<span class="line"><span></span></span>
<span class="line"><span>C# DB 통신</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1. ADO.NET</span></span>
<span class="line"><span>-Winform, Classic ASP</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2. Enterprise Library 5</span></span>
<span class="line"><span>- 쿼리문을 직접 작성 -&gt; 값을 처리</span></span>
<span class="line"><span>- Logging</span></span>
<span class="line"><span></span></span>
<span class="line"><span>단점: 1,2의 경우쿼리문을 직접 작성으로 오류 발생의 소지가 높음.</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>#ORM</span></span>
<span class="line"><span>- Java JPA를 기준으로 하이버네이트</span></span>
<span class="line"><span>- C# EntityFramework 1.0 ~ 7.0</span></span>
<span class="line"><span>     Mapper</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#게시판 프로젝트</span></span>
<span class="line"><span>준비물 : Asp.net MVC, MS SQL, EntityFramework</span></span>
<span class="line"><span></span></span>
<span class="line"><span>EntityFramework 1.0 ~ 6.0까지는 .net Framework (풀닷넷)에 사용</span></span>
<span class="line"><span>ASP.NET Core는 7.0부터 EntityFramework Core</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>ASP.NET Core 1.x</span></span>
<span class="line"><span>EntityFramework Core 1.1</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 개발방식 EntityFramework</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1) Database First 방식</span></span>
<span class="line"><span>- Database DBA(데이터베이스 관리자)</span></span>
<span class="line"><span>- 설계 완료, 물리적 데이터베이스도 모두 완성된 상태.</span></span>
<span class="line"><span>=&gt; Database 기준으로 Appication 개발</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>2) Code First 방식</span></span>
<span class="line"><span>- Database 기준으로 Appication 개발 역으로</span></span>
<span class="line"><span>=&gt; Code -&gt; Database 생성해 Appication 개발</span></span>
<span class="line"><span></span></span>
<span class="line"><span>MS SQL 2014, 2016</span></span>
<span class="line"><span>1) SQL 엔진</span></span>
<span class="line"><span>2) Management Studio 14, 16</span></span>
<span class="line"><span></span></span>
<span class="line"><span>MySQL 과 비교</span></span>
<span class="line"><span>1)MySQL 엔진</span></span>
<span class="line"><span>2)Workbench</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># MS SQL SA 비밀번호 설정 이유</span></span>
<span class="line"><span>1) Web Server와 SQL Server가 다른 컴퓨터일 경우</span></span>
<span class="line"><span>http://db.example.com:1433</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Chapter 7</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ASP.NET MVC</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 1. 프레임워크 업그레이드</span></span>
<span class="line"><span>-ASP.NET MVC Core 1.1    (##NuGetPackage에서 업데이트, www.nuget.org ,메이븐리파지토리와 비슷 https://mvnrepository.com/)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 2. EntityFramework Core 설치 ( ##Microsoft.EntityFramework core, Microsoft.EntityFramework core.Server, Microsoft.EntityFramework core.Tools 설치)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CodeFirst 방식으로 Model Class -&gt; DBContext -&gt; 실제 테이블을 생성</span></span>
<span class="line"><span></span></span>
<span class="line"><span>User 모델 -&gt; 사용자</span></span>
<span class="line"><span>Note 모델 _&gt; 게시판</span></span>
<span class="line"><span></span></span>
<span class="line"><span>User</span></span>
<span class="line"><span>사용자 번호(PK)</span></span>
<span class="line"><span>사용자 이름</span></span>
<span class="line"><span>사용자 ID</span></span>
<span class="line"><span>사용자 Password</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Note</span></span>
<span class="line"><span>게시물 번호(PK)</span></span>
<span class="line"><span>게시물 제목</span></span>
<span class="line"><span>게시물 내용</span></span>
<span class="line"><span>작성자 (숫자 - 사용자번호)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 3. DBContext 생성 -&gt; Table 생성할 수 있는 코드를 작성.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>(##DataContext만듦)</span></span>
<span class="line"><span>1.</span></span>
<span class="line"><span>    public class AspnetNoteDbContext : DbContext</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        public DbSet&lt;User&gt; Users { get; set; }</span></span>
<span class="line"><span>        public DbSet&lt;Note&gt; Notes { get; set; }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2.</span></span>
<span class="line"><span>        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            base.OnConfiguring(optionsBuilder);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3. connectionstring https://www.connectionstrings.com/sql-server/</span></span>
<span class="line"><span></span></span>
<span class="line"><span>4. 비주얼스튜디오의 상단 보기 &gt;Server Explorer 사용해서</span></span>
<span class="line"><span> Data Source=(localdb)\\v11.0;Initial Catalog=master;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False</span></span>
<span class="line"><span></span></span>
<span class="line"><span>5. 보기 &gt; 다른 창 &gt; 패키지 관리자 콘솔</span></span>
<span class="line"><span>add-migration FirstMigration</span></span>
<span class="line"><span>update-database</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># 4. DBContext -&gt; 실제 테이블을 생성</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>xml주석 사용방법 ///</span></span>
<span class="line"><span>ctrl + 위, 아래</span></span>
<span class="line"><span>using 문에서 ctrl + . 사용하지 않는 것은 제거</span></span>
<span class="line"><span>클래스 조인방법 public virtual, virtual을 권장함</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>chapter 8</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>사용자 로그인, 회원가입</span></span>
<span class="line"><span></span></span>
<span class="line"><span>회원가입 -&gt; 사용자 정보 입력 -&gt; DB 저장.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>로그인 -&gt; 사용자 정보를 입력 -&gt; 사용자 정보를 보유</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>spring security 예제와 같은 것</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ASP.NET Identity(Securiry)</span></span>
<span class="line"><span>-사용자 로그인(인증)</span></span>
<span class="line"><span>-사용자 Role(Admin,User,Poweruser)</span></span>
<span class="line"><span>-SMS 인증, Email 인증</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Session 이용한 로그인, 회원가입 구현</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>로그인 2가지 방법론.</span></span>
<span class="line"><span># 1. Session</span></span>
<span class="line"><span>-웹 서버가 사용자 정보를 메모리에 담아놓아 보안성이 높다.(장점)</span></span>
<span class="line"><span>-웹 서버 메모리 부하가 높아진다.(단점)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 2. Cookie</span></span>
<span class="line"><span>-웹 서버 로그인 -&gt; 사용자 정보 -&gt; 브라우저 전달 -&gt; 쿠키로 저장</span></span>
<span class="line"><span>-웹 서버의 부하가 낮아진다.(장점)</span></span>
<span class="line"><span>-보안성이 낮아진다.(단점)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 결론: Cookie</span></span>
<span class="line"><span>-Cookie를 암호화 -&gt; 복호화 / 위변조의 위험</span></span>
<span class="line"><span>-SSL인증서를 사용하여 위변조의 위험을 막음</span></span>
<span class="line"><span></span></span>
<span class="line"><span># SSL</span></span>
<span class="line"><span>- 유료 100만원 20만원 (매년), 무료</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>GET : DB에서 받음</span></span>
<span class="line"><span>http://www.example.com/api/GetBookList?bookNo=1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>POST : DB에 전달</span></span>
<span class="line"><span>http://www.example.com/PostUser</span></span>
<span class="line"><span></span></span>
<span class="line"><span>AccountController.cs</span></span>
<span class="line"><span>Register.cshtml</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Chapter 9</span></span>
<span class="line"><span></span></span>
<span class="line"><span>.net core 2가지 트랙</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 1. LST (Long Term Suprot)</span></span>
<span class="line"><span>느리게 업그레이드 .net core</span></span>
<span class="line"><span>------------1------------1------------1------------1------------1</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 2. Current</span></span>
<span class="line"><span> 빠른 업그레이드 .net core</span></span>
<span class="line"><span>----1----1----1----1----1----1----1----1----1</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Chapter 10</span></span>
<span class="line"><span></span></span>
<span class="line"><span>로그인</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Linq, 매서드 체이닝</span></span>
<span class="line"><span>https://docs.microsoft.com/ko-kr/dotnet/csharp/linq/</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>람다식에서 A Go to B</span></span>
<span class="line"><span>u =&gt; u</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>메모리 누수를 방지하기위해서 ==  사용하지 않기</span></span>
<span class="line"><span>                    //var user = db.Users.FirstOrDefault(u=&gt;u.UserId == model.UserId &amp;&amp; u.UserPassword == model.UserPassword);</span></span>
<span class="line"><span>                    var user = db.Users.FirstOrDefault(u =&gt; u.UserId.Equals(model.UserId) &amp;&amp; u.UserPassword.Equals(model.UserPassword));</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># 로그인시 Validation Required가 다있어야 되므로 없어서 인증이 안됨</span></span>
<span class="line"><span>Model =&gt; 기본 엔티티 클래스</span></span>
<span class="line"><span></span></span>
<span class="line"><span>User</span></span>
<span class="line"><span>-&gt; UserNo</span></span>
<span class="line"><span>-&gt; UserName</span></span>
<span class="line"><span>ID,Password</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ViewModel -&gt; 뷰(View)를 위한 모델</span></span>
<span class="line"><span>MVC(Model,View, Controller)</span></span>
<span class="line"><span>WPF(MVVM)</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># ModelState 상태 메시지 보기</span></span>
<span class="line"><span>asp.net core asp-validation-summary</span></span>
<span class="line"><span></span></span>
<span class="line"><span>https://docs.microsoft.com/ko-kr/aspnet/core/tutorials/first-mvc-app/validation?view=aspnetcore-2.1</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Chapter 11</span></span>
<span class="line"><span></span></span>
<span class="line"><span># NuGet Package -&gt; Microsoft.AspNetCore.Session 설치</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>ASP.NET MVC -&gt; IIS(웹서버)  = 아파치</span></span>
<span class="line"><span>-WebAPI 압축기능 이용시 둘다 설정해줘야함</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ASP.NET Core -&gt; 리눅스, 윈도우, MacOS</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># Startup.cs 에서 미들웨어 형태로 사용</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>            services.AddSession();</span></span>
<span class="line"><span>            app.UseSession();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>로그아웃 시 세션에서 지움</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Chapter 12</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>게시판 리스트 출력</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>알트+ 쉬프트 아래</span></span>
<span class="line"><span>쉬프트 + delete</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Chapter 13</span></span>
<span class="line"><span></span></span>
<span class="line"><span>게시물</span></span>
<span class="line"><span></span></span>
<span class="line"><span>로우 12개 중에 col-lg-4해서3등분</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>asp.net core HttpContext.Session</span></span>
<span class="line"><span></span></span>
<span class="line"><span>https://benjii.me/2016/07/using-sessions-and-httpcontext-in-aspnetcore-and-mvc-core/</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Chapter 14</span></span>
<span class="line"><span></span></span>
<span class="line"><span>게시물 상세보기 페이지 만들기</span></span>
<span class="line"><span></span></span>
<span class="line"><span>http://www.example.com</span></span>
<span class="line"><span>http://www.example.com/{noteNo}</span></span>
<span class="line"><span>http://www.example.com/Note/Detail?noteNo=1</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># Trumbowyg  자바스크립트 에디터</span></span>
<span class="line"><span></span></span>
<span class="line"><span>github javascript editor</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>https://alex-d.github.io/Trumbowyg/?utm_source=tool.lu</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>https://summernote.org/</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Chapter 15</span></span>
<span class="line"><span></span></span>
<span class="line"><span>NPM Node Package Manager</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Node.js</span></span>
<span class="line"><span></span></span>
<span class="line"><span># bower</span></span>
<span class="line"><span>프론트엔드 패키지 매니저</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CLI  (Command Line Interface)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>trumbowyg 사용</span></span>
<span class="line"><span></span></span>
<span class="line"><span>https://alex-d.github.io/Trumbowyg/documentation/</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Superscript: 위첨자</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Chapter 16</span></span>
<span class="line"><span></span></span>
<span class="line"><span>자바스크립트 텍스트 에디어 이미지 업로드</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ctor 탭 2번</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>@기호로 이거를 그대로 인식하도록</span></span>
<span class="line"><span>http://ko.cppreference.com/w/cpp/language/escape</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>@기호로 이거를 그대로 인식하도록</span></span>
<span class="line"><span></span></span>
<span class="line"><span>trumbowyg.upload.js의 파일 수정</span></span>
<span class="line"><span></span></span>
<span class="line"><span>serverPath</span></span>
<span class="line"><span>fileFieldName</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>https://alex-d.github.io/Trumbowyg/?utm_source=tool.lu</span></span>
<span class="line"><span></span></span>
<span class="line"><span>재정의</span></span>
<span class="line"><span></span></span>
<span class="line"><span>한글변환</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># 비동기적 처리하는 Async</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-2.1&amp;tabs=visual-studio%2Caspnetcore2x</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Chapter 17</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Enterprise Architecture c#</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># Enterprise Architecture</span></span>
<span class="line"><span>1.  대형 솔루션, 프로그램 개발할 때 사용하는 프로젝트 구성 방식 - 큰 틀을 구성</span></span>
<span class="line"><span>        2. 다양한 플랫폼을 지원하는 재사용성이 높은 코드를 작성하는 방식</span></span>
<span class="line"><span>3.</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Presentation Layer :  WPF, WinForm</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Business Layer : Validation Check</span></span>
<span class="line"><span></span></span>
<span class="line"><span> Cache</span></span>
<span class="line"><span>-목적: 자주 불러오는 데이터를 메모리에 담아서 출력하는 것</span></span>
<span class="line"><span>-장점: 컴퓨팅 비용 감소, 데이터를 출력하는 속도가 증가</span></span>
<span class="line"><span>-단점: 메모리를 많이 필요로 하게 됨</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Data Access Layer :   DB에 접근</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># Class Library를 사용하여 Business, Data Access layer를 만듦</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># DLL</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 클래스 라이브러리 종류</span></span>
<span class="line"><span>1.  .net Framework</span></span>
<span class="line"><span>2.  .net core</span></span>
<span class="line"><span>3.  .net Framework(portable) -Xamarin</span></span>
<span class="line"><span>4.  .net Standard</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ASP.NET 닷넷 프레임워크 프로젝트이고 data 클래스 라이브러리 (닷넷 코어) 이면 접근이 안되는 경우도 있음</span></span>
<span class="line"><span></span></span>
<span class="line"><span># .NET STANDARD로 통합</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span> IDataAccessLayer</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># 각 Tier 별로 접근 순서</span></span>
<span class="line"><span></span></span>
<span class="line"><span>클라이언트 버튼 -&gt; ASP.NET MVC 리스트 출력 호출 -&gt; BLL -&gt; IDAL -&gt; DAL ( -&gt; BLL -&gt; MVC )</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>오라클로 변경시에는  Oracle.DAL 만 바꿈</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Chapter 18</span></span>
<span class="line"><span></span></span>
<span class="line"><span>의존성 주입 (Dependency Injection):</span></span>
<span class="line"><span></span></span>
<span class="line"><span>프로그래밍에서 구성요소간의 의존 관계가 소스코드 내부가 아닌 외부의 설정파일 등을 통해 정의되게 하는 디자인 패턴</span></span>
<span class="line"><span></span></span>
<span class="line"><span>제어반전</span></span>
<span class="line"><span></span></span>
<span class="line"><span>IoC (Inversion of Control)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>프로그래머가 작성한 프로그램이 재사용 라이브러리의 흐름제어를 받게되는 소프트웨어 디자인 패턴을 말한다.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>IoC Container</span></span>
<span class="line"><span></span></span>
<span class="line"><span>객체를 프레임워크에서 간접적으로 생성, 소멸 시켜주는 컨테이너를 뜻함.</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># MVC 6 - 의존성 주입을 할 수 있는 3가지.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1.  services.AddSingleton&lt;T&gt;();  - 웹사이트가 시작하면 웹사이트가 종료될 때까지 메모리 상에 유지되는 객체 주입</span></span>
<span class="line"><span>2.  services.AddScoped&lt;T&gt;(); - 웹사이트가 시작되어 1번의 요청이 있을 때 메모리 상에 유지되는 객체 주입</span></span>
<span class="line"><span>3.  services.AddTransient&lt;T&gt;(); - 웹사이트가 시작되어 각 요청마다 새롭게 생성되는 객체 주입</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 싱글턴 패턴</span></span>
<span class="line"><span>https://ko.wikipedia.org/wiki/%EC%8B%B1%EA%B8%80%ED%84%B4_%ED%8C%A8%ED%84%B4</span></span>
<span class="line"><span></span></span>
<span class="line"><span>http://jusungpark.tistory.com/16</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1번 사용자 -&gt; UserBll 사용하면 계속 남아 있음</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>#AddScoped</span></span>
<span class="line"><span>https://docs.microsoft.com/ko-kr/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.1</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Chapter 19</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Unity Container</span></span>
<span class="line"><span></span></span>
<span class="line"><span>https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ff647202(v=pandp.10)</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># ioc Container c#</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>누겟패키지 설치</span></span>
<span class="line"><span>Unity.Mvc</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>콘트롤 + home 누르면 맨위로 올라감</span></span>
<span class="line"><span>콘트롤 + tab</span></span>
<span class="line"><span>콘트롤 + 위 아래</span></span>
<span class="line"><span>탭에 휠누르면 닫힘</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Chapter 20</span></span>
<span class="line"><span></span></span>
<span class="line"><span>appsettings.json을 통한 ConnecitionString 처리</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>리샵퍼사용하면 interface 원하는 순서로 바꿀수있음</span></span>
<span class="line"><span></span></span>
<span class="line"><span># DataAccessLayer에서 누겟패키지 두개 추가</span></span>
<span class="line"><span> Microsoft.EntityFrameworkCore</span></span>
<span class="line"><span>Microsoft.EntityFrameworkCore.SqlServer</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># connectionstring</span></span>
<span class="line"><span>https://www.connectionstrings.com/sql-server/</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># 패키지 매니저 콘솔에서 기본프로젝트는 Note.DAL로</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 누겟 패키지 Microsoft.EntityFrameworkCore.Tools</span></span>
<span class="line"><span></span></span>
<span class="line"><span>add-migration NoteDb</span></span>
<span class="line"><span>update-database</span></span>
<span class="line"><span></span></span>
<span class="line"><span># connectionstring위치를 appsettings.json에 입력</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Startupp.cs</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Chapter 21</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 스레드</span></span>
<span class="line"><span>https://ko.wikipedia.org/wiki/%EC%8A%A4%EB%A0%88%EB%93%9C_(%EC%BB%B4%ED%93%A8%ED%8C%85)</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># Winform, WPF</span></span>
<span class="line"><span>Thread</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1.UI Thread</span></span>
<span class="line"><span>2.Background Thread</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-for, foreach, 파일입출력</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 동기적 프로그래밍</span></span>
<span class="line"><span>Method1();    3초</span></span>
<span class="line"><span>Method2();    3초</span></span>
<span class="line"><span>Method3();    3초</span></span>
<span class="line"><span>- 총 9초 소요</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 비동기적 프로그래밍</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Method1();    3초</span></span>
<span class="line"><span>Method2();    3초</span></span>
<span class="line"><span>Method3();    3초</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- 총 3초 소요</span></span>
<span class="line"><span></span></span>
<span class="line"><span>C# 비동기적 프로그래밍을 위한 키워드</span></span>
<span class="line"><span></span></span>
<span class="line"><span>1. async, await, Task, Task&lt;T&gt;</span></span>
<span class="line"><span> - C# 5.0 , 닷넷 프레임워크 4.5</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># 테스트 방법 - 전통적인 방식</span></span>
<span class="line"><span>            Stopwatch watch = new Stopwatch();</span></span>
<span class="line"><span>            watch.Start();</span></span>
<span class="line"><span>            var test1 = Test1Async();</span></span>
<span class="line"><span>            var test2 = Test2Async();</span></span>
<span class="line"><span>            var test3 = Test3Async();</span></span>
<span class="line"><span>            var result1 = await test1;</span></span>
<span class="line"><span>            var result2 = await test2;</span></span>
<span class="line"><span>            var result3 = await test3;</span></span>
<span class="line"><span>            watch.Stop();</span></span>
<span class="line"><span>            var result = watch.ElapsedMilliseconds;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 테스트 방법 - 새로운 방식 Visual Studio Diagonositcs Tools</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># 비동기적으로 처리하는 것이 과연 성능상 좋아진 것 일까?</span></span>
<span class="line"><span>성능상 좋아진 것이 아니라 남는 것을 사용하는 것</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Ctrl + mm 누르면 최소화됨</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>  Chapter 22</span></span>
<span class="line"><span></span></span>
<span class="line"><span># ASP.NET Core Identity</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- 로그인, 로그아웃, 개별 인증(관리자, 일반사용자)</span></span>
<span class="line"><span>- 일반 사용자(나이가 19세 이상)</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># Identity 테이블 구조</span></span>
<span class="line"><span>1. dbo.AspNetUsers         =&gt; ApplicationUser (유저 클래스)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- ID, 비밀번호, 사용자 이름</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2. dbo.AspNetRoles         =&gt; ApplicationRole  (룰 클래스)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- 이 웹사이트에 회원 분류</span></span>
<span class="line"><span>- 슈퍼 관리자, 관리자, 특별 사용자 , 일반 사용자</span></span>
<span class="line"><span></span></span>
<span class="line"><span>3. dbo.AspNetUserRoles     =&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- 1번 사용자(PK 1) -&gt; 관리자(1)</span></span>
<span class="line"><span>- 2번 사용자(PK 2) -&gt; 일반 사용자(4)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>4. dbo.AspNetClaims        =&gt; 5명의 사용자 -&gt; 일반 사용자(Role)</span></span>
<span class="line"><span>- 2명이 나이 20세 미만 -&gt; 20세 미만은 특정 게시판 진입금지 Age 20</span></span>
<span class="line"><span>[HttpGet, Authorize(Claims ... Age &gt;20]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>5. dbo.AspNetRoleClaims    =&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- 관리자 - 1등, 2등, 3등</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>6. __EFMigrationsHistory 는 마이그레이션 이력관리</span></span>
<span class="line"><span></span></span>
<span class="line"><span>7. dbo.AspNetUserLogins =&gt; 외부로그인 Oauth1.0 / 2.0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>8. dbo.AspNetUserTokens =&gt; 외부로그인 관련</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>Chapter 23</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Identity 생성 테이블 PK 타입 변경하기</span></span>
<span class="line"><span></span></span>
<span class="line"><span># ApplicationDbContext 설명</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>저같은 경우는 AccountController 랑 ManageController부분에 메일발송부분 user.Id 이게 숫자형으로 변경되어서 .ToString() 해서 해결하고 startup.cs. 는 services.AddIdentity&lt;ApplicationUser, ApplicationRole&gt;() .AddEntityFrameworkStores&lt;ApplicationDbContext&gt;() .AddDefaultTokenProviders();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity-primary-key-configuration?tabs=aspnetcore2x&amp;view=aspnetcore-2.1</span></span></code></pre></div>`,1)]))}const m=n(e,[["render",i]]);export{d as __pageData,m as default};
